{
	"info": {
		"_postman_id": "6abbef63-870f-4b0d-99bb-06ecb8eca423",
		"name": "TakeProfitProject",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37858778"
	},
	"item": [
		{
			"name": "Registration",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Registration201",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response has field token\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.token).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has field roles\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.roles).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has field id\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has field email\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.email).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Token is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"token should not be empty\");\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"tockenAfterRegister\", jsonData.token);\r",
											"console.log(\"tocken after register: \", jsonData.token);\r",
											"console.log(\"email after register\", jsonData.email);\r",
											"\r",
											"   // Запрос на удаление пользователя\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/users\",\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"tockenAfterRegister\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting user: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"1@gmail.com\",\r\n  \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "UserExist409",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Conflict\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Json value message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contain(\"Email already exists\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Json value error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"DuplicateEmail\");\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"userExistRegisration@qa.qa\",\r\n  \"password\": \"Password@123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "InvaliEmail400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Json value message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.contain(\"ValidationError\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Json value message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contain(\"Email\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\":\"reg@rts\",\r\n  \"password\": \"Password@123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "InvaliEmail400 CSV",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Json value message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.contain(\"ValidationError\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Json value message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contain(\"Email\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "InvalidPassword400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Json value message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.contain(\"ValidationError\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Json value message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contain(\"Password\");\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"tasts@qa.test\",\r\n    \"password\": \"!ASaEА@hfhfAs\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "InvalidPassword400 CSV",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Json value message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.contain(\"ValidationError\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Json value message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contain(\"Password\");\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"register"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Positive200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"accessToken\", jsonData.token);\r",
											"pm.environment.set(\"loginId\", jsonData.id);\r",
											"console.log(\"Access Token: \", jsonData.token);\r",
											"pm.environment.set(\"loginEmail\", jsonData.email);\r",
											"\r",
											"\r",
											"pm.test(\"Response has field token\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.token).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has field roles\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.roles).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has field id\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.id).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has field email\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.email).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Token is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"token should not be empty\");\r",
											"});\r",
											"\r",
											"pm.test(\"Email equal loginEmail\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData.email).to.be.a('string').equal(pm.environment.get(\"loginEmail\"));\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"hannaQa@gmail.com\",\r\n  \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "UserNotExist404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"pm.test(\"Json value message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"User not found with email: usertestNotexist@gmail.com\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Json value error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"UserNotFound\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"usertestNotexist@gmail.com\",\r\n  \"password\": \"Password@123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "ExistEmailInvalidPassword401",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Json value message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid email or password\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Json value error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"AuthenticationError\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"1@1.com\",\r\n  \"password\": \"Password@0123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "GetUserInformation",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GetUserData200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has field token\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.token).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response has field roles\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.roles).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response has field id\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.id).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response has field email\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.email).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Token is a non-empty string\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"\r",
													"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"token should not be empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "GetNotExistUser401",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has Unauthorized\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{badToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "UpdateDataUser",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "UpdatePassword200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// // Fixed content type and response check\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has field message\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.message).to.eql(\"Password changed successfully.\");\r",
													"});\r",
													"\r",
													"\r",
													" // Запрос на удаление пользователя\r",
													"    pm.sendRequest({\r",
													"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/users\",\r",
													"        method: \"DELETE\",\r",
													"        header: {\r",
													"            \"Authorization\": \"Bearer \" + pm.environment.get(\"tokenForUpdate\")\r",
													"        }\r",
													"    }, function (err, response) {\r",
													"        if (err) {\r",
													"            console.error(\"Error while deleting user: \", err);\r",
													"        } else {\r",
													"            console.log(\"Response status: \", response.status);\r",
													"            console.log(\"Response: \", response.json());\r",
													"\r",
													"           \r",
													"        }\r",
													"    });\r",
													"\r",
													"    \r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"newEmail\", Date.now().toString()+\"upd@mail.com\")\r",
													"pm.sendRequest({\r",
													"    url:  pm.environment.get(\"baseUrl\")+\"/api/v1/register\", \r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"raw\",\r",
													"        raw: JSON.stringify({\r",
													"            \"email\": pm.environment.get(\"newEmail\"),\r",
													"            \"password\": pm.environment.get(\"password\") \r",
													"        })\r",
													"    }\r",
													"}, function (err, response) {\r",
													"    if (err) {\r",
													"        console.error(err);\r",
													"    } else {\r",
													"        var jsonData = response.json();\r",
													"        pm.environment.set(\"tokenForUpdate\", jsonData.token); // Сохраняем токен в окружении\r",
													"        console.log(\"Token for Update: \", jsonData.token);\r",
													"        console.log(\"id\", jsonData.id);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"password\": \"Password@2811\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"password"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteAccount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"pm.collectionVariables.get(\"variable_key\");\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//\r",
													"\r",
													"pm.test(\"Response has field token\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.token).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response has field roles\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.roles).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response has field id\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.id).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response has field email\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.email).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Token is a non-empty string\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"\r",
													"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"token should not be empty\");\r",
													"});\r",
													"\r",
													"pm.test(\"Email equal loginEmail\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"\r",
													"  pm.expect(responseData.email).to.be.a('string').equal(\"nots2user@mail.qa\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Функция для отправки запроса на создание нового пользователя\r",
													"\r",
													"var timestamp = pm.environment.get(\"timestamp\");\r",
													"pm.sendRequest({\r",
													"    url: \"https://takeprofit.tech/api/v1/register\", // URL для регистрации пользователя\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"raw\",\r",
													"        raw: JSON.stringify({\r",
													"            email: \"nots2user@mail.qa\",\r",
													"            password: \"Password@126\" \r",
													"        })\r",
													"    }\r",
													"}, function (err, response) {\r",
													"    if (err) {\r",
													"        console.error(err);\r",
													"    } else {\r",
													"        // Парсинг ответа, чтобы извлечь токен\r",
													"        var jsonData = response.json();\r",
													"        pm.environment.set(\"tokenForDelete\", jsonData.token); // Сохраняем токен в окружении\r",
													"        console.log(\"Token for Deletion: \", jsonData.token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenForDelete}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateEmail200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Fixed the order of test script and defined jsonData before using it\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"var updatedEmail = jsonData.email;\r",
													"\r",
													"pm.environment.set(\"tockenAfterUpdate\", jsonData.token);\r",
													"console.log(\"tocken after update: \", jsonData.token);\r",
													"console.log(\"email after update\", jsonData.email);\r",
													"\r",
													"pm.test(\"Email contain emailUpdated\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"\r",
													"  pm.expect(responseData.email).to.be.a('string').contain(\"upd@qa.com\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has field token\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.token).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response has field roles\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.roles).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response has field id\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.id).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Response has field email\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.email).to.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"Token is a non-empty string\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"\r",
													"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"token should not be empty\");\r",
													"});\r",
													"\r",
													"   // Запрос на удаление пользователя\r",
													"    pm.sendRequest({\r",
													"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/users\",\r",
													"        method: \"DELETE\",\r",
													"        header: {\r",
													"            \"Authorization\": \"Bearer \" + pm.environment.get(\"tockenAfterUpdate\")\r",
													"        }\r",
													"    }, function (err, response) {\r",
													"        if (err) {\r",
													"            console.error(\"Error while deleting user: \", err);\r",
													"        } else {\r",
													"            console.log(\"Response status: \", response.status);\r",
													"            console.log(\"Response: \", response.json());\r",
													"\r",
													"           \r",
													"        }\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"pm.environment.set(\"newEmail\", Date.now().toString()+\"upd@mail.com\")\r",
													"pm.sendRequest({\r",
													"    url:  pm.environment.get(\"baseUrl\")+\"/api/v1/register\", \r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"raw\",\r",
													"        raw: JSON.stringify({\r",
													"            \"email\": pm.environment.get(\"newEmail\"),\r",
													"            \"password\": pm.environment.get(\"password\") \r",
													"        })\r",
													"    }\r",
													"}, function (err, response) {\r",
													"    if (err) {\r",
													"        console.error(err);\r",
													"    } else {\r",
													"        var jsonData = response.json();\r",
													"        pm.environment.set(\"tokenForUpdate\", jsonData.token); // Сохраняем токен в окружении\r",
													"        console.log(\"Token for Update: \", jsonData.token);\r",
													"        console.log(\"id\", jsonData.id);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenForUpdate}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{updateEmail}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "UpdateEmailWithInvData401",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"// pm.test(\"Json value message\", function () {\r",
													"//     var jsonData = pm.response.json();\r",
													"//     pm.expect(jsonData.message).to.eql(\"Invalid email or password\");\r",
													"\r",
													"// });\r",
													"\r",
													"// pm.test(\"Json value error\", function () {\r",
													"//     var jsonData = pm.response.json();\r",
													"//     pm.expect(jsonData.error).to.eql(\"AuthenticationError\");\r",
													"\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{badToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{updateEmail}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateEmailToExist409",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Json value message\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.contain(\"Email already exists\");\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Json value error\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"DuplicateEmail\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"1@2.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateEmail400",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Json value error\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"ValidationError\");\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Json value message\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.exist;\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"@.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdatePasswordWithInvalidData401",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{badToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"password\": \"123455667778@fdgdgd\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"password"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdatePassInvalidPass400",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Json value message\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.exist;\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Json value error\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error).to.eql(\"ValidationError\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"password\": \"www@ghgd2\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"password"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "TraidingInfFromBinance",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Candle200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('array'); \r",
											"    pm.expect(responseData.length).to.be.greaterThan(0); \r",
											"});\r",
											"\r",
											"pm.test(\"First object in the array has field timestamp\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData[0]).to.be.an('object');\r",
											"    pm.expect(responseData[0]).to.have.property('timestamp'); \r",
											"});\r",
											"\r",
											"pm.test(\"First object in the array has field open\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData[0]).to.have.property('open'); \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"First object in the array has field high\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData[0]).to.have.property('high'); \r",
											"});\r",
											"\r",
											"pm.test(\"First object in the array has field low\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData[0]).to.have.property('low'); \r",
											"});\r",
											"\r",
											"pm.test(\"First object in the array has field close\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData[0]).to.have.property('close'); \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"First object in the array has field volume\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData[0]).to.have.property('volume'); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"interval\": \"1h\",\r\n  \"period\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/candles/EURUSDT",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"candles",
										"EURUSDT"
									]
								}
							},
							"response": []
						},
						{
							"name": "Candle CSV",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"interval\": \"{{interval}}\",\r\n  \"period\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/candles/{{para}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"candles",
										"{{para}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Money200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('array'); \r",
											"    pm.expect(responseData.length).to.be.greaterThan(0); \r",
											"});\r",
											"\r",
											"pm.test(\"First object in the array has field symbol\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData[0]).to.be.an('object');\r",
											"    pm.expect(responseData[0]).to.have.property('symbol'); \r",
											"});\r",
											"\r",
											"pm.test(\"First object in the array has field priceChangePercent\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData[0]).to.have.property('priceChangePercent'); \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"First object in the array has field lastPrice\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData[0]).to.have.property('lastPrice'); \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/symbols",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"symbols"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetIntervals200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('array'); \r",
											"    pm.expect(responseData.length).to.be.greaterThan(15); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/intervals",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"intervals"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Candle 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"interval\": \"6754h\",\r\n  \"period\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/candles/XZCBTC",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"candles",
										"XZCBTC"
									]
								}
							},
							"response": []
						},
						{
							"name": "Candle 404 InvalidData",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"interval\": \"1m\",\r\n  \"period\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/candles/SNTETH",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"candles",
										"SNTETH"
									]
								}
							},
							"response": []
						},
						{
							"name": "Money 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{badToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/symbols",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"symbols"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetIntervals401",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{badToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/intervals",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"intervals"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Exchenges",
			"item": [
				{
					"name": "PositiveDemo",
					"item": [
						{
							"name": "GetAllExchanges200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('array'); \r",
											"    pm.expect(responseData.length).to.be.greaterThan(0); \r",
											"});\r",
											"\r",
											"pm.test(\"First object in the array has field id\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData[0]).to.be.an('object');\r",
											"    pm.expect(responseData[0]).to.have.property('id'); \r",
											"});\r",
											"\r",
											"pm.test(\"First object in the array has field usedId\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData[0]).to.have.property('usedId'); \r",
											"});\r",
											"\r",
											"pm.test(\"First object in the array has field exchange and it equals 'Binance'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData[0]).to.have.property('exchange').that.is.a('string').and.equals(\"Binance\"); \r",
											"});\r",
											"\r",
											"pm.test(\"First object in the array has field name\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData[0]).to.have.property('name').to.contain(\"BINANCE\"); \r",
											"});\r",
											"\r",
											"pm.test(\"First object's userId equals loginId from environment variables\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData[0].usedId).to.be.a('string').and.equal(pm.environment.get(\"loginId\")); \r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"firstExchID\", jsonData[0].id);\r",
											"// pm.environment.set(\"secondExchConnectedId\", jsonData[1].id);\r",
											"// pm.environment.set(\"thirdExchNotConnectedId\", jsonData[2].id);\r",
											"// //pm.environment.set(\"secondIdforDELETE\", jsonData[1].id);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetOneExchange200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response is an object and id equal firstExchID \", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.id).to.equal(pm.environment.get(\"firstExchID\")); \r",
											"});\r",
											"\r",
											"pm.test(\"usedId equal userId \", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.usedId).to.equal(pm.environment.get(\"loginId\")); \r",
											"});\r",
											"\r",
											"pm.test(\"object  has field exchange and it equals 'Binance'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.have.property('exchange').that.is.a('string').and.equals(\"Binance\"); \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges/{{firstExchID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges",
										"{{firstExchID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "NegativeDemo",
					"item": [
						{
							"name": "GetAllExchanges401",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{badToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetOneExchange404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response is an object and error eql ExchangeNotFound \", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.error).to.equal(\"ExchangeNotFound\"); \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"object  has field message and it contain 'Exchange with ID 123411w not found'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.have.property('message').that.is.a('string').and.contains(\"Exchange with ID 1112@ not found\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges/{{wrongExchangeId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges",
										"{{wrongExchangeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetOneExchange401",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{badToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges/{{firstExchID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges",
										"{{firstExchID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "PositiveLive",
					"item": [
						{
							"name": "POST createNewExchange200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an object and  \", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.id).to.exist; \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field usedId \", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.usedId).to.eql(pm.environment.get(\"loginId\")); \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field name \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.name).to.exist; \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field type \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.type).to.equal(\"real\"); \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field connect \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.connect).to.equal(true); \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field message \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.message).to.exist; \r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"exchangeNewAndDelete\", jsonData.id);\r",
											"\r",
											"\r",
											"\r",
											"// Запрос на удаление exchange\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges/\" + pm.environment.get(\"exchangeNewAndDelete\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ExchangeNewAndDelete\",\r\n  \"apiKey\": \"{{apiKeyDen}}\",\r\n  \"secretKey\": \"{{secretKeyDen}}\",\r\n  \"exchange\": \"Binance\",\r\n  \"isDefault\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has field id eql idDeleteExch \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.id).to.equal(pm.environment.get(\"idExchangDELETE\")); \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// Отправляем Post-запрос для создания обмена\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"         \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"55Exchange\",\r",
											"            apiKey: \"MyApiKey\", \r",
											"            secretKey: \"MySecretApiKey\", \r",
											"            exchange: \"Binance\",\r",
											"            isDefault: false\r",
											"        })\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"    } else {\r",
											"        // Извлекаем данные из ответа\r",
											"        var jsonData = response.json();\r",
											"         pm.environment.set(\"idExchangDELETE\", jsonData.id);\r",
											"        console.log(\"ID: \", jsonData.id);\r",
											"        \r",
											"    \r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges/{{idExchangDELETE}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges",
										"{{idExchangDELETE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetListExchang200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('array'); \r",
											"    pm.expect(responseData.length).to.be.greaterThan(0); \r",
											"});\r",
											"\r",
											"pm.test(\"First in the array is Binance\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData[0]).to.be.an('string');\r",
											"    pm.expect(responseData[0]).to.eql(\"Binance\"); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges/types",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges",
										"types"
									]
								}
							},
							"response": []
						},
						{
							"name": "ChangeExchange200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response is an object and id equal ExchId \", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.id).to.equal(pm.environment.get(\"changeExch\")); \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Запрос на удаление exchange\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges/\" + pm.environment.get(\"changeExch\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// Отправляем POST-запрос для создания обмена\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"         \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"55Exchange\",\r",
											"            apiKey: \"MyApiKey\", \r",
											"            secretKey: \"MySecretApiKey\", \r",
											"            exchange: \"Binance\",\r",
											"            isDefault: false\r",
											"        })\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"    } else {\r",
											"        // Извлекаем данные из ответа\r",
											"        var jsonData = response.json();\r",
											"         pm.environment.set(\"changeExch\", jsonData.id);\r",
											"        console.log(\"ID: \", jsonData.id);\r",
											"        \r",
											"    \r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ChangeAndDelete\",\r\n  \"apiKey\": \"InvalidKey\",\r\n  \"secretKey\": \"InvalidSecretKey\",\r\n  \"exchange\": \"Binance\",\r\n  \"isDefault\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges/{{changeExch}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges",
										"{{changeExch}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetPortfolio200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Запрос на удаление exchange\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges/\" + pm.environment.get(\"exchPortfolio\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// Отправляем POST-запрос для создания обмена\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"         \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"ConnectedExch\",\r",
											"            apiKey: pm.environment.get(\"apiKeyDen\"), \r",
											"            secretKey: pm.environment.get(\"secretKeyDen\"), \r",
											"            exchange: \"Binance\",\r",
											"            isDefault: false\r",
											"        })\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"    } else {\r",
											"        // Извлекаем данные из ответа\r",
											"        var jsonData = response.json();\r",
											"         pm.environment.set(\"exchPortfolio\", jsonData.id);\r",
											"        console.log(\"ID: \", jsonData.id);\r",
											"        \r",
											"    \r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges/{{exchPortfolio}}/portfolio",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges",
										"{{exchPortfolio}}",
										"portfolio"
									]
								}
							},
							"response": []
						},
						{
							"name": "PatchLikeDefault200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an object and isDefault true \", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.isDefault).to.equal(true); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges/{{firstExchID}}/default",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges",
										"{{firstExchID}}",
										"default"
									]
								}
							},
							"response": []
						},
						{
							"name": "UsersPaarMoney200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// Отправляем POST-запрос для создания обмена\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"         \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"55Exchange\",\r",
											"            apiKey: pm.environment.get(\"apiKeyDen\"), \r",
											"            secretKey: pm.environment.get(\"secretKeyDen\"), \r",
											"            exchange: \"Binance\",\r",
											"            isDefault: false\r",
											"        })\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"    } else {\r",
											"        // Извлекаем данные из ответа\r",
											"        var jsonData = response.json();\r",
											"         pm.environment.set(\"exchPortfolioPaar\", jsonData.id);\r",
											"        console.log(\"ID: \", jsonData.id);\r",
											"        \r",
											"    \r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"First object in the array has field symbol\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData[0]).to.have.property('symbol'); \r",
											"});\r",
											"\r",
											"pm.test(\"First object in the array has field priceChangePercent'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData[0]).to.have.property('priceChangePercent'); \r",
											"});\r",
											"\r",
											"pm.test(\"First object in the array has field lastPrice\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData[0]).to.have.property('lastPrice'); \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Запрос на удаление exchange\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges/\" + pm.environment.get(\"exchPortfolioPaar\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/symbols/{{exchPortfolioPaar}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"symbols",
										"{{exchPortfolioPaar}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetIndicators200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/indicators",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"indicators"
									]
								}
							},
							"response": []
						},
						{
							"name": "GeExchangeBeforeDeleteWithoutBots",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has field message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.message).to.eql(\"This exchange does not have bots, deletion is safe\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Запрос на удаление exchange\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges/\" + pm.environment.get(\"idExchangDELETE\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"         \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"55Exchange\",\r",
											"            apiKey: \"MyApiKey\", \r",
											"            secretKey: \"MySecretApiKey\", \r",
											"            exchange: \"Binance\",\r",
											"            isDefault: false\r",
											"        })\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"    } else {\r",
											"        // Извлекаем данные из ответа\r",
											"        var jsonData = response.json();\r",
											"         pm.environment.set(\"idExchangDELETE\", jsonData.id);\r",
											"        console.log(\"ID: \", jsonData.id);\r",
											"        \r",
											"    \r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges/{{idExchangDELETE}}/preliminary",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges",
										"{{idExchangDELETE}}",
										"preliminary"
									]
								}
							},
							"response": []
						},
						{
							"name": "GeExchangeBeforeDelete WithBots",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.collectionVariables.get(\"variable_key\");\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has field message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.message).to.eql(\"After deleting the exchange, the bots will be deactivated.\");\r",
											"});\r",
											"\r",
											"// After creating the bot, perform a GET request to check its details (if required)\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges/\" + pm.environment.get(\"secondExchConnectedId\") + \"/preliminary\",\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(\"Error fetching preliminary data: \", err);\r",
											"    } else {\r",
											"        console.log(\"Preliminary data for exchange: \", response.json());\r",
											"        \r",
											"        // Now, delete the bot\r",
											"        pm.sendRequest({\r",
											"            url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"botId\"),\r",
											"            method: \"DELETE\",\r",
											"            header: {\r",
											"                \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"            }\r",
											"        }, function (err, response) {\r",
											"            if (err) {\r",
											"                console.error(\"Error while deleting bot: \", err);\r",
											"            } else {\r",
											"                console.log(\"Bot deleted successfully. Response: \", response.status);\r",
											"            }\r",
											"        });\r",
											"\r",
											"        // Finally, delete the exchange\r",
											"        pm.sendRequest({\r",
											"            url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges/\" + pm.environment.get(\"secondExchConnectedId\"),\r",
											"            method: \"DELETE\",\r",
											"            header: {\r",
											"                \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"            }\r",
											"        }, function (err, response) {\r",
											"            if (err) {\r",
											"                console.error(\"Error while deleting exchange: \", err);\r",
											"            } else {\r",
											"                console.log(\"Exchange deleted successfully. Response: \", response.status);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Create the Exchange\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"55Exchange\",\r",
											"            apiKey: pm.environment.get(\"apiKeyDen\"),\r",
											"            secretKey: pm.environment.get(\"secretKeyDen\"),\r",
											"            exchange: \"Binance\",\r",
											"            isDefault: false\r",
											"        })\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        pm.environment.set(\"secondExchConnectedId\", jsonData.id);\r",
											"        console.log(\"Exchange Created ID: \", jsonData.id);\r",
											"\r",
											"        // Create the Bot\r",
											"        pm.sendRequest({\r",
											"            url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots\",\r",
											"            method: \"POST\",\r",
											"            header: {\r",
											"                \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
											"                \"Content-Type\": \"application/json\"\r",
											"            },\r",
											"            body: {\r",
											"                mode: \"raw\",\r",
											"                raw: JSON.stringify({\r",
											"                    exchangeId: jsonData.id,\r",
											"                    tradingPair: \"DOGEUSDT\",\r",
											"                    type: \"Long\",\r",
											"                    deposit: 6.00,\r",
											"                    stopLoss: false,\r",
											"                    takeProfit: true,\r",
											"                    pumpDump: false,\r",
											"                    indicators: [\r",
											"                        {\r",
											"                            indicator: \"RSI\",\r",
											"                            period: 30,\r",
											"                            interval: \"15m\"\r",
											"                        }\r",
											"                    ]\r",
											"                })\r",
											"            }\r",
											"        }, function (err, response) {\r",
											"            if (err) {\r",
											"                console.error(err);\r",
											"            } else {\r",
											"                var jsonDataBot = response.json();\r",
											"                pm.environment.set(\"botId\", jsonDataBot.id);\r",
											"                console.log(\"Bot Created ID: \", jsonDataBot.id);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges/{{secondExchConnectedId}}/preliminary",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges",
										"{{secondExchConnectedId}}",
										"preliminary"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "NegativeLive",
					"item": [
						{
							"name": "GeExchangeBeforeDelete DEMO 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges/{{firstExchID}}/preliminary",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges",
										"{{firstExchID}}",
										"preliminary"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST createNewExchange401",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{badToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"MyExchange\",\r\n  \"apiKey\": \"MyKeys\",\r\n  \"secretKey\": \"MyKeys\",\r\n  \"exchange\": \"Binance\",\r\n  \"isDefault\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST createNewExchange400 checkFieldBinance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response is an object and error eql ExchangeBadRequest\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.error).to.equal(\"ExchangeBadRequest\"); \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"object  has field message and it contain Exchange must be one of: Binance\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.have.property('message').and.contains(\"Exchange must be one of: Binance\")\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"MyExchange\",\r\n  \"apiKey\": \"MyKeys\",\r\n  \"secretKey\": \"MyKeys\",\r\n  \"exchange\": \"S\",\r\n  \"isDefault\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST createNewExchange400 checkFieldName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"  \r",
											"pm.test(\"Response is an object and error eql ValidationError \", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.error).to.equal(\"ValidationError\"); \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"object  has field message and it contain Connection name is required\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.have.property('message').that.is.a('string').and.contains(\"Connection name is required\")\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"apiKey\": \"hjhg\",\r\n  \"secretKey\": \"hghg\",\r\n  \"exchange\": \"Binance\",\r\n  \"isDefault\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Exchange 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Response is an object and error eql ExchangeNotFound \", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.error).to.equal(\"ExchangeNotFound\"); \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"object  has field message and it contain Connection name is required\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.have.property('message').that.is.a('string').and.contains(\"Exchange with ID 1112@ not found\")\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges/{{wrongExchangeId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges",
										"{{wrongExchangeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetListExchang401",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{badToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges/types",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges",
										"types"
									]
								}
							},
							"response": []
						},
						{
							"name": "ChangeExchange404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Response is an object and error eql ExchangeNotFound \", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.error).to.equal(\"ExchangeNotFound\"); \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"object  has field message and it contain Connection name is required\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.have.property('message').that.is.a('string').and.contains(\"Exchange with ID 1112@ not found\")\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"MyFirstExchChanged\",\r\n  \"apiKey\": \"{{apiKeyDen}}\",\r\n  \"secretKey\": \"{{accessToken}}\",\r\n  \"exchange\": \"Binance\",\r\n  \"isDefault\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges/{{wrongExchangeId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges",
										"{{wrongExchangeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetPortfolio403",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Response is an object and error eql FORBIDDEN\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.error).to.equal(\"FORBIDDEN\"); \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"object  has field message and it contain Exchange is not connected.\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.have.property('message').that.is.a('string').and.contains( \"You do not have access to this exchange.\")\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"// Запрос на удаление exchange\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges/\" + pm.environment.get(\"ExchIsnotconnected\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// Отправляем POST-запрос для создания обмена\r",
											"pm.sendRequest({\r",
											"    url: \"http://localhost:8080/api/v1/exchanges\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"         \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"55Exchange\",\r",
											"            apiKey: \"badKeys\", \r",
											"            secretKey: \"secretKeyDen\", \r",
											"            exchange: \"Binance\",\r",
											"            isDefault: false\r",
											"        })\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"    } else {\r",
											"        // Извлекаем данные из ответа\r",
											"        var jsonData = response.json();\r",
											"         pm.environment.set(\"ExchIsnotconnected\", jsonData.id);\r",
											"        console.log(\"ID: \", jsonData.id);\r",
											"        \r",
											"    \r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges/{{ExchIsnotconnected}}/portfolio",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges",
										"{{ExchIsnotconnected}}",
										"portfolio"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetPortfolio401",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{badToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges/673b7f24ec61ad6da86b978b/portfolio",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges",
										"673b7f24ec61ad6da86b978b",
										"portfolio"
									]
								}
							},
							"response": []
						},
						{
							"name": "PatchLikeDefault404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"pm.test(\"Response is an object and error eql ExchangeNotFound \", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.error).to.equal(\"ExchangeNotFound\"); \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"object  has field message and it contain Connection name is required\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.have.property('message').that.is.a('string').and.contains(\"Exchange with ID 1112@ not found\")\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/exchanges/{{wrongExchangeId}}/default",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"exchanges",
										"{{wrongExchangeId}}",
										"default"
									]
								}
							},
							"response": []
						},
						{
							"name": "UsersPaarMoney401",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{badToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/symbols/673a4f1e132b21518ba9eb07",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"symbols",
										"673a4f1e132b21518ba9eb07"
									]
								}
							},
							"response": []
						},
						{
							"name": "UsersPaarMoney404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/symbols/{{ExchIsnotconnected}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"symbols",
										"{{ExchIsnotconnected}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Bots",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "GetAllMyBots 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBot 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"//DOGEUSDUT\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"ctreateBot\", jsonData.id);\r",
											"\r",
											"pm.test(\"Response is an object and  \", function () {\r",
											"const responseData = pm.response.json();\r",
											"pm.expect(responseData).to.be.an('object'); \r",
											"pm.expect(responseData.id).to.exist; \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field exchId \", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.exchangeId).to.eql(pm.environment.get(\"idExchangDELETE\")); \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field tradingPair \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.tradingPair).to.exist; \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field type \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.type).to.equal(\"Long\"); \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field deposit \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.deposit).to.equal(5); \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field stopLoss \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.stopLoss).to.exist; \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field takeProfit \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.takeProfit).to.exist; \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field pumpDump \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.pumpDump).to.exist; \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field status\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"     pm.expect(responseData.status).to.equal(\"stop\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has field createdAt\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.createdAt).to.exist; \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has field indicators\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.indicators).to.exist; \r",
											"});\r",
											"\r",
											"// Проверка, что indicators является массивом\r",
											"pm.test(\"Indicators is an array\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.indicators).to.be.an(\"array\"); \r",
											"     pm.expect(responseData.indicators.length).to.be.above(0); \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Проверка, что первый объект массива indicators имеет поле indicator и оно равно \"RSI\"\r",
											"pm.test(\"First indicator has correct name\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.indicators[0]).to.have.property(\"indicator\", \"RSI\"); \r",
											"});\r",
											"\r",
											"// Проверка, что первый объект массива indicators имеет поле period и оно равно 14\r",
											"pm.test(\"First indicator has correct period\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.indicators[0]).to.have.property(\"period\", 14); \r",
											"});\r",
											"\r",
											"// Проверка, что первый объект массива indicators имеет поле interval и оно равно \"1m\"\r",
											"pm.test(\"First indicator has correct interval\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.indicators[0]).to.have.property(\"interval\", \"1m\"); \r",
											"});\r",
											"\r",
											"// Проверка, что все объекты indicators содержат необходимые поля\r",
											"pm.test(\"All indicators have required fields\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    responseData.indicators.forEach(function (indicator) {\r",
											"        pm.expect(indicator).to.have.property(\"indicator\");\r",
											"        pm.expect(indicator).to.have.property(\"period\");\r",
											"        pm.expect(indicator).to.have.property(\"interval\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//Запрос на удаление bot\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"ctreateBot\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });\r",
											"\r",
											"    // Запрос на удаление exchange\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges/\" + pm.environment.get(\"idExchangDELETE\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Create the Exchange\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"55Exchange\",\r",
											"            apiKey: pm.environment.get(\"apiKeyDen\"),\r",
											"            secretKey: pm.environment.get(\"secretKeyDen\"),\r",
											"            exchange: \"Binance\",\r",
											"            isDefault: false\r",
											"        })\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(\"Error while creating exchange: \", err);\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        pm.environment.set(\"idExchangDELETE\", jsonData.id);\r",
											"        console.log(\"Exchange Created ID: \", jsonData.id);\r",
											"        \r",
											"       \r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"exchangeId\": \"{{idExchangDELETE}}\",\r\n  \"tradingPair\": \"ETHUSDT\",\r\n  \"type\": \"Long\",\r\n  \"deposit\": 5.00,\r\n  \"stopLoss\": true,\r\n  \"takeProfit\": true,\r\n  \"pumpDump\": true,\r\n  \"indicators\": [\r\n    {\r\n      \"indicator\": \"RSI\",\r\n      \"period\": 14,\r\n      \"interval\": \"1m\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBot 200 Demo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"ctreateBotDemo\", jsonData.id);\r",
											"\r",
											"// Запрос на удаление bot\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"ctreateBotDemo\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });\r",
											"\r",
											"    \r",
											"pm.test(\"Response has field exchId \", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.exchangeId).to.eql(pm.environment.get(\"firstExchID\")); \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field tradingPair \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.tradingPair).to.exist; \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field type \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.type).to.equal(\"Long\"); \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field deposit \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.deposit).to.equal(100); \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field stopLoss \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.stopLoss).to.exist; \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field takeProfit \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.takeProfit).to.exist; \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field pumpDump \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.pumpDump).to.exist; \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field status\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"     pm.expect(responseData.status).to.equal(\"stop\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has field createdAt\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.createdAt).to.exist; \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has field indicators\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.indicators).to.exist; \r",
											"});\r",
											"\r",
											"// Проверка, что indicators является массивом\r",
											"pm.test(\"Indicators is an array\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.indicators).to.be.an(\"array\"); \r",
											"     pm.expect(responseData.indicators.length).to.be.above(0); \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Проверка, что первый объект массива indicators имеет поле indicator и оно равно \"RSI\"\r",
											"pm.test(\"First indicator has correct name\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.indicators[0]).to.have.property(\"indicator\", \"STOCHASTIC\"); \r",
											"});\r",
											"\r",
											"// Проверка, что первый объект массива indicators имеет поле period и оно равно 14\r",
											"pm.test(\"First indicator has correct period\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.indicators[0]).to.have.property(\"period\", 14); \r",
											"});\r",
											"\r",
											"// Проверка, что первый объект массива indicators имеет поле interval и оно равно \"1m\"\r",
											"pm.test(\"First indicator has correct interval\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.indicators[0]).to.have.property(\"interval\", \"1m\"); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"exchangeId\": \"{{firstExchID}}\",\r\n  \"tradingPair\": \"DOGEUSDT\",\r\n  \"type\": \"Long\",\r\n  \"deposit\": 100.00,\r\n  \"stopLoss\": true,\r\n  \"takeProfit\": true,\r\n  \"pumpDump\": true,\r\n  \"indicators\": [\r\n    {\r\n      \"indicator\": \"STOCHASTIC\",\r\n      \"period\": 14,\r\n      \"interval\": \"1m\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetOneBot 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has field Id \", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.id).to.eql(pm.environment.get(\"botId\")); \r",
											"});\r",
											"\r",
											"\r",
											"//Запрос на удаление bot\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"botId\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//create new bot\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            exchangeId: pm.environment.get(\"firstExchID\"), // Переменная для exchangeId\r",
											"            tradingPair: \"DOGEUSDT\",\r",
											"            type: \"Long\",\r",
											"            deposit: 11.00,\r",
											"            stopLoss: false,\r",
											"            takeProfit: true,\r",
											"            pumpDump: false,\r",
											"            indicators: [\r",
											"                {\r",
											"                    indicator: \"RSI\",\r",
											"                    period: 30,\r",
											"                    interval: \"15m\"\r",
											"                }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"    } else {\r",
											"        // Обработка ответа\r",
											"        var jsonData = response.json();\r",
											"        console.log(\"Response Data: \", jsonData);\r",
											"        // Сохранение, если потребуется ID бота\r",
											"        if (jsonData.id) {\r",
											"            pm.environment.set(\"botId\", jsonData.id);\r",
											"            console.log(\"Bot ID: \", jsonData.id);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots/{{botId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots",
										"{{botId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ChangeBot 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has field exchId and id \", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"     pm.expect(responseData.id).to.eql(pm.environment.get(\"botId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response has field tradingPair \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.tradingPair).to.exist; \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field type \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.type).to.equal(\"Long\"); \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field deposit \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.deposit).to.equal(100); \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field stopLoss \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.stopLoss).to.exist; \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field takeProfit \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.takeProfit).to.exist; \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field pumpDump \", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.pumpDump).to.exist; \r",
											"});\r",
											"\r",
											"pm.test(\"Response has field status\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"     pm.expect(responseData.status).to.equal(\"Stop\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has field createdAt\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.createdAt).to.exist; \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has field indicators\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.indicators).to.exist; \r",
											"});\r",
											"\r",
											"// Проверка, что indicators является массивом\r",
											"pm.test(\"Indicators is an array\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.indicators).to.be.an(\"array\"); \r",
											"     pm.expect(responseData.indicators.length).to.be.above(0); \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Проверка, что первый объект массива indicators имеет поле indicator и оно равно \"RSI\"\r",
											"pm.test(\"First indicator has correct name\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.indicators[0]).to.have.property(\"indicator\", \"EMA\"); \r",
											"});\r",
											"\r",
											"// Проверка, что первый объект массива indicators имеет поле period и оно равно 14\r",
											"pm.test(\"First indicator has correct period\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.indicators[0]).to.have.property(\"period\", 14); \r",
											"});\r",
											"\r",
											"// Проверка, что первый объект массива indicators имеет поле interval и оно равно \"1m\"\r",
											"pm.test(\"First indicator has correct interval\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"    pm.expect(responseData.indicators[0]).to.have.property(\"interval\", \"1m\"); \r",
											"});\r",
											"\r",
											"//Запрос на удаление bot\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"botId\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//create new bot\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            exchangeId: pm.environment.get(\"firstExchID\"), // Переменная для exchangeId\r",
											"            tradingPair: \"DOGEUSDT\",\r",
											"            type: \"Long\",\r",
											"            deposit: 100.00,\r",
											"            stopLoss: false,\r",
											"            takeProfit: true,\r",
											"            pumpDump: false,\r",
											"            indicators: [\r",
											"                {\r",
											"                    indicator: \"RSI\",\r",
											"                    period: 30,\r",
											"                    interval: \"15m\"\r",
											"                }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"    } else {\r",
											"        // Обработка ответа\r",
											"        var jsonData = response.json();\r",
											"        console.log(\"Response Data: \", jsonData);\r",
											"        // Сохранение, если потребуется ID бота\r",
											"        if (jsonData.id) {\r",
											"            pm.environment.set(\"botId\", jsonData.id);\r",
											"            console.log(\"Bot ID: \", jsonData.id);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"deposit\": 100,\r\n  \"stopLoss\": true,\r\n  \"takeProfit\": true,\r\n  \"pumpDump\": true,\r\n  \"indicators\": [\r\n    {\r\n      \"indicator\": \"EMA\",\r\n      \"period\": 14,\r\n      \"interval\": \"1m\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots/{{botId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots",
										"{{botId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteOneBot 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response has field Id \", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.id).to.eql(pm.environment.get(\"botId\")); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//create new bot\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            exchangeId: pm.environment.get(\"firstExchID\"), // Переменная для exchangeId\r",
											"            tradingPair: \"DOGEUSDT\",\r",
											"            type: \"Long\",\r",
											"            deposit: 11.00,\r",
											"            stopLoss: false,\r",
											"            takeProfit: true,\r",
											"            pumpDump: false,\r",
											"            indicators: [\r",
											"                {\r",
											"                    indicator: \"RSI\",\r",
											"                    period: 30,\r",
											"                    interval: \"15m\"\r",
											"                }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"    } else {\r",
											"        // Обработка ответа\r",
											"        var jsonData = response.json();\r",
											"        console.log(\"Response Data: \", jsonData);\r",
											"        // Сохранение, если потребуется ID бота\r",
											"        if (jsonData.id) {\r",
											"            pm.environment.set(\"botId\", jsonData.id);\r",
											"            console.log(\"Bot ID: \", jsonData.id);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots/{{botId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots",
										"{{botId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "GetMyBots 401 WithInvalidTocken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has field error\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.error).to.eqls('Unauthorized'); \r",
											"    pm.expect(responseData.message).to.contains(\"JWT signature does not match\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{badToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBot 400 WithDeposit0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"ctreateBot\", jsonData.id);\r",
											"\r",
											"pm.test(\"Response has field error\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.error).to.eqls('ExchangeBadRequest'); \r",
											"    pm.expect(responseData.message).to.contains(\"Deposit cannot be equal to 0\");\r",
											"});\r",
											"\r",
											"// Запрос на удаление bot\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"ctreateBot\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"exchangeId\": \"{{secondExchConnectedId}}\",\r\n  \"tradingPair\": \"USDTRUB\",\r\n  \"type\": \"Short\",\r\n  \"deposit\": 0,\r\n  \"stopLoss\": false,\r\n  \"takeProfit\": true,\r\n  \"pumpDump\": false,\r\n  \"indicators\": [\r\n    {\r\n      \"indicator\": \"ATR\",\r\n      \"period\": 30,\r\n      \"interval\": \"15m\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBot 400 WithEmptyField",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"ctreateBot\", jsonData.id);\r",
											"\r",
											"pm.test(\"Response has field error\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.error).to.eqls(\"ValidationError\"); \r",
											"    pm.expect(responseData.message).to.contains(\"Trading pair is required\");\r",
											"});\r",
											"\r",
											"// Запрос на удаление bot\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"ctreateBot\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"exchangeId\": \"{{secondExchConnectedId}}\",\r\n  \"tradingPair\": \"\",\r\n  \"type\": \"Short\",\r\n  \"deposit\": 10,\r\n  \"stopLoss\": false,\r\n  \"takeProfit\": true,\r\n  \"pumpDump\": false,\r\n  \"indicators\": [\r\n    {\r\n      \"indicator\": \"ATR\",\r\n      \"period\": 30,\r\n      \"interval\": \"15m\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBot 403 WithNotConnectedExchExch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"ctreateBot\", jsonData.id);\r",
											"\r",
											"pm.test(\"Response has field error\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.error).to.eqls(\"FORBIDDEN\"); \r",
											"    pm.expect(responseData.message).to.contains(\"Exchange is not connected.\");\r",
											"});\r",
											"\r",
											"// Запрос на удаление bot\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"ctreateBot\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"exchangeId\": \"{{thirdExchNotConnectedId}}\",\r\n  \"tradingPair\": \"EURUSDT\",\r\n  \"type\": \"Short\",\r\n  \"deposit\": 10,\r\n  \"stopLoss\": false,\r\n  \"takeProfit\": true,\r\n  \"pumpDump\": false,\r\n  \"indicators\": [\r\n    {\r\n      \"indicator\": \"ATR\",\r\n      \"period\": 30,\r\n      \"interval\": \"15m\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBot 400 WithExceededDeposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"ctreateBot\", jsonData.id);\r",
											"\r",
											"pm.test(\"Response has field error\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.error).to.eqls('ExchangeBadRequest'); \r",
											"    pm.expect(responseData.message).to.contains(\"cannot be greater than available balance\");\r",
											"});\r",
											"\r",
											" // Запрос на удаление exchange\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges/\" + pm.environment.get(\"idExchangDELETE\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"// // Запрос на удаление bot\r",
											"//     pm.sendRequest({\r",
											"//         url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"ctreateBot\"),\r",
											"//         method: \"DELETE\",\r",
											"//         header: {\r",
											"//             \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"//         }\r",
											"//     }, function (err, response) {\r",
											"//         if (err) {\r",
											"//             console.error(\"Error while deleting exch: \", err);\r",
											"//         } else {\r",
											"//             console.log(\"Response status: \", response.status);\r",
											"//             console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"//         }\r",
											"//     });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Create the Exchange\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"55Exchange\",\r",
											"            apiKey: pm.environment.get(\"apiKeyDen\"),\r",
											"            secretKey: pm.environment.get(\"secretKeyDen\"),\r",
											"            exchange: \"Binance\",\r",
											"            isDefault: false\r",
											"        })\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(\"Error while creating exchange: \", err);\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        pm.environment.set(\"idExchangDELETE\", jsonData.id);\r",
											"        console.log(\"Exchange Created ID: \", jsonData.id);\r",
											"        \r",
											"       \r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"exchangeId\": \"{{idExchangDELETE}}\",\r\n  \"tradingPair\": \"BTCUSDT\",\r\n  \"type\": \"Long\",\r\n  \"deposit\": 1000,\r\n  \"stopLoss\": false,\r\n  \"takeProfit\": true,\r\n  \"pumpDump\": false,\r\n  \"indicators\": [\r\n    {\r\n      \"indicator\": \"EMA\",\r\n      \"period\": 30,\r\n      \"interval\": \"15m\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBot 400 WithWrongType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"ctreateBot\", jsonData.id);\r",
											"\r",
											"pm.test(\"Response has field error\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.error).to.eqls(\"ExchangeBadRequest\"); \r",
											"    pm.expect(responseData.message).contains(\"Unable to find corresponding asset in portfolio for trading pair:\");\r",
											"});\r",
											"\r",
											" // Запрос на удаление exchange\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges/\" + pm.environment.get(\"idExchangDELETE\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Запрос на удаление bot\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"ctreateBot\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Create the Exchange\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"55Exchange\",\r",
											"            apiKey: pm.environment.get(\"apiKeyDen\"),\r",
											"            secretKey: pm.environment.get(\"secretKeyDen\"),\r",
											"            exchange: \"Binance\",\r",
											"            isDefault: false\r",
											"        })\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(\"Error while creating exchange: \", err);\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        pm.environment.set(\"idExchangDELETE\", jsonData.id);\r",
											"        console.log(\"Exchange Created ID: \", jsonData.id);\r",
											"        \r",
											"       \r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"exchangeId\": \"{{idExchangDELETE}}\",\r\n  \"tradingPair\": \"BNBEUR\",\r\n  \"type\": \"Short\",\r\n  \"deposit\": 13,\r\n  \"stopLoss\": false,\r\n  \"takeProfit\": true,\r\n  \"pumpDump\": false,\r\n  \"indicators\": [\r\n    {\r\n      \"indicator\": \"SMA\",\r\n      \"period\": 30,\r\n      \"interval\": \"15m\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBot 400 WithWrongIndicator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"ctreateBot\", jsonData.id);\r",
											"\r",
											"pm.test(\"Response has field error\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.error).to.eqls(\"ExchangeBadRequest\"); \r",
											"    pm.expect(responseData.message).contains(\"Indicator  is not supported. Supported indicators are: [RSI, STOCHASTIC, EMA, SMA]\");\r",
											"});\r",
											"\r",
											"// Запрос на удаление bot\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"ctreateBot\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"exchangeId\": \"{{firstExchID}}\",\r\n  \"tradingPair\": \"BTCUSDT\",\r\n  \"type\": \"Short\",\r\n  \"deposit\": 13,\r\n  \"stopLoss\": false,\r\n  \"takeProfit\": true,\r\n  \"pumpDump\": false,\r\n  \"indicators\": [\r\n    {\r\n      \"indicator\": \"\",\r\n      \"period\": 30,\r\n      \"interval\": \"15m\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBot 400 Demo Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"ctreateBot\", jsonData.id);\r",
											"\r",
											"pm.test(\"Response has field error\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.error).to.eqls('ExchangeBadRequest'); \r",
											"    pm.expect(responseData.message).to.contains(\"Deposit cannot be equal to 0\");\r",
											"});\r",
											"\r",
											"// Запрос на удаление bot\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"ctreateBotDemo\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"exchangeId\": \"{{firstExchID}}\",\r\n  \"tradingPair\": \"EURUSDT\",\r\n  \"type\": \"Long\",\r\n  \"deposit\": 0,\r\n  \"stopLoss\": false,\r\n  \"takeProfit\": false,\r\n  \"pumpDump\": false,\r\n  \"indicators\": [\r\n    {\r\n      \"indicator\": \"STOCHASTIC\",\r\n      \"period\": 7,\r\n      \"interval\": \"5m\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetOneBot 404 Notexist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has field error\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.error).to.eqls(\"BotsNotFound\"); \r",
											"    pm.expect(responseData.message).contains(\"Bot with ID \"+ pm.environment.get(\"botId\") + \" not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots/{{botId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots",
										"{{botId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ChangeBot 400ExceededDeposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has field error\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.error).to.eqls(\"ExchangeBadRequest\"); \r",
											"    pm.expect(responseData.message).contains(\"cannot be greater than available balance of\");\r",
											"});\r",
											"\r",
											"\r",
											"// After creating the bot, perform a GET request to check its details (if required)\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges/\" + pm.environment.get(\"secondExchConnectedId\") + \"/preliminary\",\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(\"Error fetching preliminary data: \", err);\r",
											"    } else {\r",
											"        console.log(\"Preliminary data for exchange: \", response.json());\r",
											"        \r",
											"        // Now, delete the bot\r",
											"        pm.sendRequest({\r",
											"            url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"botId\"),\r",
											"            method: \"DELETE\",\r",
											"            header: {\r",
											"                \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"            }\r",
											"        }, function (err, response) {\r",
											"            if (err) {\r",
											"                console.error(\"Error while deleting bot: \", err);\r",
											"            } else {\r",
											"                console.log(\"Bot deleted successfully. Response: \", response.status);\r",
											"            }\r",
											"        });\r",
											"\r",
											"        // Finally, delete the exchange\r",
											"        pm.sendRequest({\r",
											"            url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges/\" + pm.environment.get(\"secondExchConnectedId\"),\r",
											"            method: \"DELETE\",\r",
											"            header: {\r",
											"                \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"            }\r",
											"        }, function (err, response) {\r",
											"            if (err) {\r",
											"                console.error(\"Error while deleting exchange: \", err);\r",
											"            } else {\r",
											"                console.log(\"Exchange deleted successfully. Response: \", response.status);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Create the Exchange\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/exchanges\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"55Exchange\",\r",
											"            apiKey: pm.environment.get(\"apiKeyDen\"),\r",
											"            secretKey: pm.environment.get(\"secretKeyDen\"),\r",
											"            exchange: \"Binance\",\r",
											"            isDefault: false\r",
											"        })\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        pm.environment.set(\"secondExchConnectedId\", jsonData.id);\r",
											"        console.log(\"Exchange Created ID: \", jsonData.id);\r",
											"\r",
											"        // Create the Bot\r",
											"        pm.sendRequest({\r",
											"            url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots\",\r",
											"            method: \"POST\",\r",
											"            header: {\r",
											"                \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
											"                \"Content-Type\": \"application/json\"\r",
											"            },\r",
											"            body: {\r",
											"                mode: \"raw\",\r",
											"                raw: JSON.stringify({\r",
											"                    exchangeId: jsonData.id,\r",
											"                    tradingPair: \"DOGEUSDT\",\r",
											"                    type: \"Long\",\r",
											"                    deposit: 6.00,\r",
											"                    stopLoss: false,\r",
											"                    takeProfit: true,\r",
											"                    pumpDump: false,\r",
											"                    indicators: [\r",
											"                        {\r",
											"                            indicator: \"RSI\",\r",
											"                            period: 30,\r",
											"                            interval: \"15m\"\r",
											"                        }\r",
											"                    ]\r",
											"                })\r",
											"            }\r",
											"        }, function (err, response) {\r",
											"            if (err) {\r",
											"                console.error(err);\r",
											"            } else {\r",
											"                var jsonDataBot = response.json();\r",
											"                pm.environment.set(\"botId\", jsonDataBot.id);\r",
											"                console.log(\"Bot Created ID: \", jsonDataBot.id);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"deposit\": 10000,\r\n  \"stopLoss\": false,\r\n  \"takeProfit\": false,\r\n  \"pumpDump\": false,\r\n  \"indicators\": [\r\n    {\r\n      \"indicator\": \"EMA\",\r\n      \"period\": 2,\r\n      \"interval\": \"1h\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots/{{botId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots",
										"{{botId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ChangeBot 400Deposit0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has field error\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.error).to.eqls(\"ExchangeBadRequest\"); \r",
											"    pm.expect(responseData.message).contains(\"Deposit cannot be equal to 0\");\r",
											"});\r",
											"\r",
											"\r",
											"//Запрос на удаление bot\r",
											"    pm.sendRequest({\r",
											"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"botId\"),\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
											"        }\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Error while deleting exch: \", err);\r",
											"        } else {\r",
											"            console.log(\"Response status: \", response.status);\r",
											"            console.log(\"Response: \", response.json());\r",
											"\r",
											"           \r",
											"        }\r",
											"    });\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            exchangeId: pm.environment.get(\"firstExchID\"), // Переменная для exchangeId\r",
											"            tradingPair: \"DOGEUSDT\",\r",
											"            type: \"Long\",\r",
											"            deposit: 11.00,\r",
											"            stopLoss: false,\r",
											"            takeProfit: true,\r",
											"            pumpDump: false,\r",
											"            indicators: [\r",
											"                {\r",
											"                    indicator: \"RSI\",\r",
											"                    period: 30,\r",
											"                    interval: \"15m\"\r",
											"                }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"    } else {\r",
											"        // Обработка ответа\r",
											"        var jsonData = response.json();\r",
											"        console.log(\"Response Data: \", jsonData);\r",
											"        // Сохранение, если потребуется ID бота\r",
											"        if (jsonData.id) {\r",
											"            pm.environment.set(\"botId\", jsonData.id);\r",
											"            console.log(\"Bot ID: \", jsonData.id);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"deposit\": 0,\r\n  \"stopLoss\": false,\r\n  \"takeProfit\": false,\r\n  \"pumpDump\": false,\r\n  \"indicators\": [\r\n    {\r\n      \"indicator\": \"MACD\",\r\n      \"period\": 1,\r\n      \"interval\": \"1m\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots/{{botId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots",
										"{{botId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteOneBot 404NotExist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has field error\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object'); \r",
											"    pm.expect(responseData.error).to.eqls(\"BotsNotFound\"); \r",
											"    pm.expect(responseData.message).contains(\"Bot with ID 673fc77d039ef730fa447e09 not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// //create new bot\r",
											"// pm.sendRequest({\r",
											"//     url: \"http://localhost:8080/api/v1/bots\",\r",
											"//     method: \"POST\",\r",
											"//     header: {\r",
											"//         \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
											"//         \"Content-Type\": \"application/json\"\r",
											"//     },\r",
											"//     body: {\r",
											"//         mode: \"raw\",\r",
											"//         raw: JSON.stringify({\r",
											"//             exchangeId: pm.environment.get(\"secondExchConnectedId\"), // Переменная для exchangeId\r",
											"//             tradingPair: \"USDTRUB\",\r",
											"//             type: \"Short\",\r",
											"//             deposit: 11.00,\r",
											"//             stopLoss: false,\r",
											"//             takeProfit: true,\r",
											"//             pumpDump: false,\r",
											"//             indicators: [\r",
											"//                 {\r",
											"//                     indicator: \"ATR\",\r",
											"//                     period: 30,\r",
											"//                     interval: \"15m\"\r",
											"//                 }\r",
											"//             ]\r",
											"//         })\r",
											"//     }\r",
											"// }, function (err, response) {\r",
											"//     if (err) {\r",
											"//         console.error(err);\r",
											"//     } else {\r",
											"//         // Обработка ответа\r",
											"//         var jsonData = response.json();\r",
											"//         console.log(\"Response Data: \", jsonData);\r",
											"//         // Сохранение, если потребуется ID бота\r",
											"//         if (jsonData.id) {\r",
											"//             pm.environment.set(\"botId\", jsonData.id);\r",
											"//             console.log(\"Bot ID: \", jsonData.id);\r",
											"//         }\r",
											"//     }\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots/673fc77d039ef730fa447e09",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots",
										"673fc77d039ef730fa447e09"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "RunBots",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "StartBots 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has field status \", function () {\r",
													"    const responseData = pm.response.json(); \r",
													"    pm.expect(responseData.status).to.equal(\"Start\"); \r",
													"});\r",
													"\r",
													"\r",
													"// Отправляем Post-запрос для стоп бот\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"botId\") + \"/status\",\r",
													"    method: \"PATCH\",\r",
													"    header: {\r",
													"         \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"raw\",\r",
													"        raw: JSON.stringify({\r",
													"       \r",
													"        status: \"Stop\"\r",
													"        })\r",
													"    }\r",
													"});\r",
													"\r",
													"//Запрос на удаление bot\r",
													"    pm.sendRequest({\r",
													"        url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"botId\"),\r",
													"        method: \"DELETE\",\r",
													"        header: {\r",
													"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
													"        }\r",
													"    }, function (err, response) {\r",
													"        if (err) {\r",
													"            console.error(\"Error while deleting exch: \", err);\r",
													"        } else {\r",
													"            console.log(\"Response status: \", response.status);\r",
													"            console.log(\"Response: \", response.json());\r",
													"\r",
													"           \r",
													"        }\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots\",\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"raw\",\r",
													"        raw: JSON.stringify({\r",
													"            exchangeId: pm.environment.get(\"firstExchID\"), // Переменная для exchangeId\r",
													"            tradingPair: \"DOGEUSDT\",\r",
													"            type: \"Long\",\r",
													"            deposit: 11.00,\r",
													"            stopLoss: false,\r",
													"            takeProfit: true,\r",
													"            pumpDump: false,\r",
													"            indicators: [\r",
													"                {\r",
													"                    indicator: \"RSI\",\r",
													"                    period: 30,\r",
													"                    interval: \"15m\"\r",
													"                }\r",
													"            ]\r",
													"        })\r",
													"    }\r",
													"}, function (err, response) {\r",
													"    if (err) {\r",
													"        console.error(err);\r",
													"    } else {\r",
													"        // Обработка ответа\r",
													"        var jsonData = response.json();\r",
													"        console.log(\"Response Data: \", jsonData);\r",
													"        // Сохранение, если потребуется ID бота\r",
													"        if (jsonData.id) {\r",
													"            pm.environment.set(\"botId\", jsonData.id);\r",
													"            console.log(\"Bot ID: \", jsonData.id);\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"status\": \"Start\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/bots/{{botId}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"{{botId}}",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "StopBots 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has field status \", function () {\r",
													"    const responseData = pm.response.json(); \r",
													"    pm.expect(responseData.status).to.equal(\"Stop\"); \r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"// Step 4: Delete the bot (after testing)\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"botId\"),\r",
													"    method: \"DELETE\",\r",
													"    header: {\r",
													"        \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
													"    }\r",
													"}, function (err, response) {\r",
													"    if (err) {\r",
													"        console.error(\"Error while deleting bot: \", err);\r",
													"    } else {\r",
													"        console.log(\"Bot Deleted: \", response.status);\r",
													"        console.log(\"Delete Response: \", response.json());\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Step 1: Create the bot\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots\",\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"raw\",\r",
													"        raw: JSON.stringify({\r",
													"            exchangeId: pm.environment.get(\"firstExchID\"), // Variable for exchangeId\r",
													"            tradingPair: \"DOGEUSDT\",\r",
													"            type: \"Long\",\r",
													"            deposit: 11.00,\r",
													"            stopLoss: false,\r",
													"            takeProfit: true,\r",
													"            pumpDump: false,\r",
													"            indicators: [\r",
													"                {\r",
													"                    indicator: \"RSI\",\r",
													"                    period: 30,\r",
													"                    interval: \"15m\"\r",
													"                }\r",
													"            ]\r",
													"        })\r",
													"    }\r",
													"}, function (err, response) {\r",
													"    if (err) {\r",
													"        console.error(\"Error while creating bot: \", err);\r",
													"    } else {\r",
													"        // Handle response\r",
													"        var jsonData = response.json();\r",
													"        console.log(\"Bot Created: \", jsonData);\r",
													"        \r",
													"        // Save the bot ID in the environment variable for later use\r",
													"        if (jsonData.id) {\r",
													"            pm.environment.set(\"botId\", jsonData.id);\r",
													"            console.log(\"Bot ID: \", jsonData.id);\r",
													"            \r",
													"            // Step 2: Start the bot immediately after creating it\r",
													"            pm.sendRequest({\r",
													"                url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"botId\") + \"/status\",\r",
													"                method: \"PATCH\",\r",
													"                header: {\r",
													"                    \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
													"                    \"Content-Type\": \"application/json\"\r",
													"                },\r",
													"                body: {\r",
													"                    mode: \"raw\",\r",
													"                    raw: JSON.stringify({\r",
													"                        status: \"Start\"\r",
													"                    })\r",
													"                }\r",
													"            }, function (err, response) {\r",
													"                if (err) {\r",
													"                    console.error(\"Error while starting the bot: \", err);\r",
													"                } else {\r",
													"                    console.log(\"Bot Started: \", response.json());\r",
													"                }\r",
													"            });\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"status\": \"Stop\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/bots/{{botId}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"{{botId}}",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetbotsActivity 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"// Test for checking the structure and values in each object in the array\r",
													"pm.test(\"Response contains an array of objects with id, timestamp, and description\", function () {\r",
													"    const responseData = pm.response.json(); \r",
													"    pm.expect(responseData).to.be.an(\"array\");\r",
													"    responseData.forEach(function (item) {\r",
													"        pm.expect(item.id).to.exist;\r",
													"        pm.expect(item.id).to.be.a(\"string\");\r",
													"        pm.expect(item.timestamp).to.exist;\r",
													"        pm.expect(item.timestamp).to.be.a(\"string\");\r",
													"        pm.expect(item.description).to.exist;\r",
													"        pm.expect(item.description).to.be.a(\"string\");\r",
													"    });\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/bots/674820bb3bcb7f0ed4612c70/logs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"674820bb3bcb7f0ed4612c70",
												"logs"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetBotsSales 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response contains an array of objects with id, timestamp, and description\", function () {\r",
													"    const responseData = pm.response.json(); \r",
													"    pm.expect(responseData).to.be.an(\"array\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/bots/674820bb3bcb7f0ed4612c70/trades",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"674820bb3bcb7f0ed4612c70",
												"trades"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetBotProfit 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has fields status profitAll, profitMonth, profit24 \", function () {\r",
													"    const responseData = pm.response.json(); \r",
													"    pm.expect(responseData.profitAll).to.exist;\r",
													"    pm.expect(responseData.profitMonth).to.exist;\r",
													"    pm.expect(responseData.profit24).to.exist;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/bots/674820bb3bcb7f0ed4612c70/profits",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"674820bb3bcb7f0ed4612c70",
												"profits"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "GetBotProfit NotExist 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has field error\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object'); \r",
													"    pm.expect(responseData.error).to.eqls(\"ExchangeBadRequest\"); \r",
													"    pm.expect(responseData.message).contains(\"Bot with id 674820bb3bcb7f0ed4612c790 not found\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/bots/674820bb3bcb7f0ed4612c790/profits",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"674820bb3bcb7f0ed4612c790",
												"profits"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetBotsSales NotExist 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has field error\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object'); \r",
													"    pm.expect(responseData.error).to.eqls(\"BotsNotFound\"); \r",
													"    pm.expect(responseData.message).contains(\"Bot with ID 674820bb3bcb7f0ed4612c790 not found\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/bots/674820bb3bcb7f0ed4612c790/trades",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"674820bb3bcb7f0ed4612c790",
												"trades"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetbotsActivity NotFound 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has field error\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object'); \r",
													"    pm.expect(responseData.error).to.eqls(\"BotsNotFound\"); \r",
													"    pm.expect(responseData.message).contains(\"Bot with ID 674820bb3bcb7f0ed4612c790 not found\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/bots/674820bb3bcb7f0ed4612c790/logs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"674820bb3bcb7f0ed4612c790",
												"logs"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetbotsActivity  401 Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has field error\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object'); \r",
													"    pm.expect(responseData.error).to.eqls(\"Unauthorized\"); \r",
													"    pm.expect(responseData.message).contains(\"JWT signature does not match locally computed signature. JWT validity cannot be asserted and should not be trusted.\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{badToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/bots/674820bb3bcb7f0ed4612c790/logs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"674820bb3bcb7f0ed4612c790",
												"logs"
											]
										}
									},
									"response": []
								},
								{
									"name": "StartBotsForbidden 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has field error \", function () {\r",
													"    const responseData = pm.response.json(); \r",
													"    pm.expect(responseData.error).to.equal(\"FORBIDDEN\"); \r",
													"});\r",
													"\r",
													"pm.test(\"Response has field message \", function () {\r",
													"    const responseData = pm.response.json(); \r",
													"    pm.expect(responseData.message).to.equal(\"You do not have access to this bot.\"); \r",
													"});\r",
													"\r",
													"\r",
													"// // Отправляем Post-запрос для создания обмена\r",
													"// pm.sendRequest({\r",
													"//     url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"botId\") + \"/status\",\r",
													"//     method: \"PATCH\",\r",
													"//     header: {\r",
													"//          \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
													"//         \"Content-Type\": \"application/json\"\r",
													"//     },\r",
													"//     body: {\r",
													"//         mode: \"raw\",\r",
													"//         raw: JSON.stringify({\r",
													"       \r",
													"//         status: \"Stop\"\r",
													"//         })\r",
													"//     }\r",
													"// });\r",
													"\r",
													"// //Запрос на удаление bot\r",
													"//     pm.sendRequest({\r",
													"//         url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"botId\"),\r",
													"//         method: \"DELETE\",\r",
													"//         header: {\r",
													"//             \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
													"//         }\r",
													"//     }, function (err, response) {\r",
													"//         if (err) {\r",
													"//             console.error(\"Error while deleting exch: \", err);\r",
													"//         } else {\r",
													"//             console.log(\"Response status: \", response.status);\r",
													"//             console.log(\"Response: \", response.json());\r",
													"\r",
													"           \r",
													"//         }\r",
													"//     });\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// pm.sendRequest({\r",
													"//     url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots\",\r",
													"//     method: \"POST\",\r",
													"//     header: {\r",
													"//         \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
													"//         \"Content-Type\": \"application/json\"\r",
													"//     },\r",
													"//     body: {\r",
													"//         mode: \"raw\",\r",
													"//         raw: JSON.stringify({\r",
													"//             exchangeId: pm.environment.get(\"firstExchID\"), // Переменная для exchangeId\r",
													"//             tradingPair: \"DOGEUSDT\",\r",
													"//             type: \"Long\",\r",
													"//             deposit: 11.00,\r",
													"//             stopLoss: false,\r",
													"//             takeProfit: true,\r",
													"//             pumpDump: false,\r",
													"//             indicators: [\r",
													"//                 {\r",
													"//                     indicator: \"RSI\",\r",
													"//                     period: 30,\r",
													"//                     interval: \"15m\"\r",
													"//                 }\r",
													"//             ]\r",
													"//         })\r",
													"//     }\r",
													"// }, function (err, response) {\r",
													"//     if (err) {\r",
													"//         console.error(err);\r",
													"//     } else {\r",
													"//         // Обработка ответа\r",
													"//         var jsonData = response.json();\r",
													"//         console.log(\"Response Data: \", jsonData);\r",
													"//         // Сохранение, если потребуется ID бота\r",
													"//         if (jsonData.id) {\r",
													"//             pm.environment.set(\"botId\", jsonData.id);\r",
													"//             console.log(\"Bot ID: \", jsonData.id);\r",
													"//         }\r",
													"//     }\r",
													"// });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"status\": \"Start\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/bots/{{myBot}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"{{myBot}}",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "StartBots HasStartedBot 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has field message \", function () {\r",
													"    const responseData = pm.response.json(); \r",
													"    pm.expect(responseData.message).to.equal(\"Bot with ID \" + pm.environment.get(\"botId\") + \" is already running.\"); \r",
													"});\r",
													"\r",
													"pm.test(\"Response has field error \", function () {\r",
													"    const responseData = pm.response.json(); \r",
													"    pm.expect(responseData.error).to.equal(\"ExchangeBadRequest\"); \r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"// Step 4: Delete the bot (after testing)\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"botId\"),\r",
													"    method: \"DELETE\",\r",
													"    header: {\r",
													"        \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\")\r",
													"    }\r",
													"}, function (err, response) {\r",
													"    if (err) {\r",
													"        console.error(\"Error while deleting bot: \", err);\r",
													"    } else {\r",
													"        console.log(\"Bot Deleted: \", response.status);\r",
													"        console.log(\"Delete Response: \", response.json());\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Step 1: Create the bot\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots\",\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"raw\",\r",
													"        raw: JSON.stringify({\r",
													"            exchangeId: pm.environment.get(\"firstExchID\"), // Variable for exchangeId\r",
													"            tradingPair: \"DOGEUSDT\",\r",
													"            type: \"Long\",\r",
													"            deposit: 11.00,\r",
													"            stopLoss: false,\r",
													"            takeProfit: true,\r",
													"            pumpDump: false,\r",
													"            indicators: [\r",
													"                {\r",
													"                    indicator: \"RSI\",\r",
													"                    period: 30,\r",
													"                    interval: \"15m\"\r",
													"                }\r",
													"            ]\r",
													"        })\r",
													"    }\r",
													"}, function (err, response) {\r",
													"    if (err) {\r",
													"        console.error(\"Error while creating bot: \", err);\r",
													"    } else {\r",
													"        // Handle response\r",
													"        var jsonData = response.json();\r",
													"        console.log(\"Bot Created: \", jsonData);\r",
													"        \r",
													"        // Save the bot ID in the environment variable for later use\r",
													"        if (jsonData.id) {\r",
													"            pm.environment.set(\"botId\", jsonData.id);\r",
													"            console.log(\"Bot ID: \", jsonData.id);\r",
													"            \r",
													"            // Step 2: Start the bot immediately after creating it\r",
													"            pm.sendRequest({\r",
													"                url: pm.environment.get(\"baseUrl\") + \"/api/v1/bots/\" + pm.environment.get(\"botId\") + \"/status\",\r",
													"                method: \"PATCH\",\r",
													"                header: {\r",
													"                    \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),\r",
													"                    \"Content-Type\": \"application/json\"\r",
													"                },\r",
													"                body: {\r",
													"                    mode: \"raw\",\r",
													"                    raw: JSON.stringify({\r",
													"                        status: \"Start\"\r",
													"                    })\r",
													"                }\r",
													"            }, function (err, response) {\r",
													"                if (err) {\r",
													"                    console.error(\"Error while starting the bot: \", err);\r",
													"                } else {\r",
													"                    console.log(\"Bot Started: \", response.json());\r",
													"                }\r",
													"            });\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"status\": \"Start\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/bots/{{botId}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"bots",
												"{{botId}}",
												"status"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "SimulationBots",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "SimulationBot200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test for checking the overall structure of the response\r",
											"pm.test(\"Response is an object with expected fields\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"\r",
											"    // Ensure the response is an object\r",
											"    pm.expect(responseData).to.be.an(\"object\");\r",
											"\r",
											"    // Test for the 'symbol' field\r",
											"    pm.expect(responseData.symbol).to.exist;\r",
											"    pm.expect(responseData.symbol).to.be.a(\"string\");\r",
											"\r",
											"    // Test for the 'finalProfit' field\r",
											"    pm.expect(responseData.finalProfit).to.exist;\r",
											"    pm.expect(responseData.finalProfit).to.be.a(\"number\");\r",
											"\r",
											"    // Test for the 'transactionLogs' field\r",
											"    pm.expect(responseData.transactionLogs).to.exist;\r",
											"    pm.expect(responseData.transactionLogs).to.be.an(\"array\");\r",
											"\r",
											"    // Test for the 'candles' field\r",
											"    pm.expect(responseData.candles).to.exist;\r",
											"    pm.expect(responseData.candles).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for checking the structure of each object in the 'candles' array\r",
											"pm.test(\"Each candle object has required fields\", function () {\r",
											"    const responseData = pm.response.json(); \r",
											"\r",
											"    // Loop through each object in the 'candles' array\r",
											"    responseData.candles.forEach(function (candle) {\r",
											"        // Test for the 'timestamp' field\r",
											"        pm.expect(candle.timestamp).to.exist;\r",
											"        pm.expect(candle.timestamp).to.be.a(\"number\");\r",
											"\r",
											"        // Test for the 'open' field\r",
											"        pm.expect(candle.open).to.exist;\r",
											"        pm.expect(candle.open).to.be.a(\"string\");\r",
											"\r",
											"        // Test for the 'high' field\r",
											"        pm.expect(candle.high).to.exist;\r",
											"        pm.expect(candle.high).to.be.a(\"string\");\r",
											"\r",
											"        // Test for the 'low' field\r",
											"        pm.expect(candle.low).to.exist;\r",
											"        pm.expect(candle.low).to.be.a(\"string\");\r",
											"\r",
											"        // Test for the 'close' field\r",
											"        pm.expect(candle.close).to.exist;\r",
											"        pm.expect(candle.close).to.be.a(\"string\");\r",
											"\r",
											"        // Test for the 'volume' field\r",
											"        pm.expect(candle.volume).to.exist;\r",
											"        pm.expect(candle.volume).to.be.a(\"string\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// Optional: Test for specific values of 'symbol' or 'finalProfit'\r",
											"pm.test(\"Check if 'symbol' is 'DOGEUSDT' and 'finalProfit'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    // Test that 'symbol' is 'DOGEUSDT'\r",
											"    pm.expect(responseData.symbol).to.equal(\"DOGEUSDT\");\r",
											"    \r",
											"    // Test that 'finalProfit'\r",
											"    pm.expect(responseData.finalProfit).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"symbol\": \"DOGEUSDT\",\r\n  \"type\": \"Short\",\r\n  \"deposit\": 100,\r\n  \"stopLoss\": true,\r\n  \"takeProfit\": true,\r\n  \"pumpDump\": true,\r\n  \"indicators\": [\r\n    {\r\n      \"indicator\": \"RSI\",\r\n      \"period\": 14,\r\n      \"interval\": \"1m\"\r\n    },\r\n     {\r\n      \"indicator\": \"EMA\",\r\n      \"period\": 140,\r\n      \"interval\": \"1m\"\r\n    }\r\n\r\n\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots/simulations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots",
										"simulations"
									]
								}
							},
							"response": []
						},
						{
							"name": "SimulationBot200 CSV",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//[\r",
											"    // \"1s\",\r",
											"    // \"1m\",\r",
											"    // \"3m\",\r",
											"    // \"5m\",\r",
											"    // \"15m\",\r",
											"    // \"30m\",\r",
											"    // \"1h\",\r",
											"    // \"2h\",\r",
											"    // \"4h\",\r",
											"    // \"6h\",\r",
											"    // \"8h\",\r",
											"    // \"12h\",\r",
											"    // \"1d\",\r",
											"    // \"3d\",\r",
											"    // \"1w\",\r",
											"    // \"1M\"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"symbol\": \"{{para}}\",\r\n  \"type\": \"Long\",\r\n  \"deposit\": 100,\r\n  \"stopLoss\": true,\r\n  \"takeProfit\": true,\r\n  \"pumpDump\": false,\r\n  \"indicators\": [\r\n    {\r\n      \"indicator\": \"RSI\",\r\n      \"period\": 14,\r\n      \"interval\": \"1m\"\r\n    },\r\n     {\r\n      \"indicator\": \"RSI\",\r\n      \"period\": 14,\r\n      \"interval\": \"1m\"\r\n    }\r\n\r\n\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots/simulations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots",
										"simulations"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "SimulationBot400 WithDeposit0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"symbol\": \"ASTRBTC\",\r\n  \"type\": \"Short\",\r\n  \"deposit\": 0,\r\n  \"stopLoss\": true,\r\n  \"takeProfit\": true,\r\n  \"pumpDump\": false,\r\n  \"indicators\": [\r\n    {\r\n      \"indicator\": \"STOCHASTIC\",\r\n      \"period\": 1001,\r\n      \"interval\": \"3m\"\r\n    },\r\n     {\r\n      \"indicator\": \"RSI\",\r\n      \"period\": 10,\r\n      \"interval\": \"5m\"\r\n    }\r\n\r\n\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/bots/simulations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"bots",
										"simulations"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});"
						]
					}
				}
			]
		}
	]
}